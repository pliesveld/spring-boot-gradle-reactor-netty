buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-release' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'org.springframework.boot'

task wrapper(type: Wrapper) {
    gradleVersion = "4.5"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'application'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
        maven{ url { 'http://repo.springsource.org/libs-release/' }}
        maven{ url { 'http://repo.springsource.org/libs-milestone/' }}
        maven{ url { 'http://repo.springsource.org/libs-snapshot/' }}
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    checkstyle {
        sourceSets = Collections.singletonList(sourceSets.main)
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    dependencies {
        
    }
}

mainClassName = 'hello.Application'

bootRun {
    mainClassName = 'hello.Application'
	jvmArgs = [
//	    "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",
	]
}

bootJar {
    mainClassName = 'hello.Application'
    enabled = true
}

version = '1.0'
jar {
    baseName = 'myapp'
    version = version
    archiveName = 'myapp.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

configurations {
    resolutionStrategy {
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        all*.exclude group: 'ch.qos.logback', module: 'logback-core'
        all*.exclude group: 'ch.qos.logback', module: 'logback-classic'
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        all*.exclude group: 'org.springframework.boot', module: 'logback-classic'
        all*.exclude group: 'org.springframework.boot', module: 'logback-core'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-validation")
    compile('org.springframework.boot:spring-boot-starter-json')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    compile('org.projectlombok:lombok')
    compile group: 'io.projectreactor.ipc', name: 'reactor-netty', version: '0.7.12.RELEASE'

    compileOnly 'io.swagger:swagger-codegen-generators:1.0.0-rc1'

    compile 'io.springfox:springfox-swagger2:3.0.0-SNAPSHOT'
    compile 'io.springfox:springfox-swagger-ui:3.0.0-SNAPSHOT'
    compile 'io.springfox:springfox-spring-webflux:3.0.0-SNAPSHOT'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('junit:junit')
    testCompile 'io.rest-assured:rest-assured:3.2.0'
//    testCompile group: 'io.rest-assured', name: 'spring-mock-mvc', version: '3.2.0'
//    testCompile 'org.mockito:mockito-all:1.10.8'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'io.projectreactor:reactor-test:3.2.3.RELEASE'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
}

task generate(dependsOn: 'classes', type: JavaExec) {
    dependsOn classes
    description "Utility application for generating test data"
    main = 'test.TodoListGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args = ["ENV", "GENERATE", "COUNT"]
    println "Executing Test Data Generator..."
}

task bench(type: Exec) {
    outputs.file('./bench/bench.tsv')

    commandLine("ab", "-n", "${requests}", "-c", "${concurrent}", "-g", "${plot}", "-e", "${csv}", "${url}").workingDir("./bench/")
}

task graph(type: Exec, dependsOn: bench) {
    inputs.file('./bench/bench.tsv')
    outputs.file('./bench/graphs/timeseries.jpg')

    commandLine("gnuplot", "-c", "bench.gnuplot").workingDir("./bench/")
}

